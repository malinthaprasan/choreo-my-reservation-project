# Copyright (c) 2023, WSO2 LLC. (https://www.wso2.com/) All Rights Reserved.

# WSO2 LLC. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.

openapi: 3.0.3
info:
  title: Reservation Management - Python REST API
  description: >-
    This is a sample API specification for a simple hotel room reservation application written in Python.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
  contact:
    name: QuickBooking LLC.
    url: https://www.quickbooking.com/
    email: info@quickbooking.com
externalDocs:
  description: Choreo
  url: https://choreo.dev
servers:
  - url: http://localhost:8085
tags:
  - name: reservations
    description: In-memory reservations list cache API
paths:
  /hotels:
    get:
      summary: List all hotels
      description: Get a list of all available hotels
      operationId: ListAllHotels
      tags:
        - Hotels
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Hotel"
  /hotels/{id}:
    get:
      summary: Get hotel by ID
      description: Get details of a specific hotel by its ID
      operationId: GetHotelById
      tags:
        - Hotels
      parameters:
        - name: id
          in: path
          description: ID of the hotel to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Hotel"
        "404":
          description: Hotel not found
  /reservations:
    get:
      summary: List all reservations
      description: List all reservations
      operationId: ListAllReservations
      tags:
        - reservations
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReservationArray"

    post:
      tags:
        - Reservation Management
      summary: Create reservation providing an id and a payload
      description: Creates reservation based on the id supplied
      operationId: CreateReservationById
      responses:
        "200":
          description: Successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reservation"    

  /reservations/{reservationId}:
    get:
      description: Get single reservation
      tags:
        - Reservation Management
      summary: Get reservation by ID
      operationId: GetReservationById
      parameters:
        - name: reservationId
          in: path
          description: Reservation ID related to the requiring reservation
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "404":
          description: id not found
    put:
      tags:
        - Reservation Management
      summary: Update reservation status by giving the reservation ID
      description: Updates the status of the reservation based on the id supplied
      operationId: UpdateReservationById
      parameters:
        - name: reservationId
          in: path
          description: ID of reservation to update
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "404":
          description: id not found
      requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
    delete:
      tags:
        - Reservation Management
      summary: Delete reservation by reservation ID
      description: Deletes a reservation based on the id supplied
      operationId: DeleteReservationById
      parameters:
        - name: reservationId
          in: path
          description: ID of reservation to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "404":
          description: Id not found
components:
  schemas:
    Reservation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        from_date:
          type: string
          format: date
          example: "2025-05-10"
        to_date:
          type: string
          format: date
          example: "2025-05-12"
        hotel_id:
          type: integer
          example: 1
        hotel_name:
          type: string
          example: "Ocean View Resort"
        room_id:
          type: integer
          example: 1
        room_type:
          type: string
          example: "Deluxe"
        user_id:
          type: integer
          example: 1
        user_name:
          type: string
          example: "Alice Johnson"
        user_contact:
          type: string
          example: "alice@example.com"
    ReservationArray:
      type: array
      items:
        type: object
    Hotel:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Ocean View Resort"